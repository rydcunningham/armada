{
  "rules": {
    "context_initialization": {
      "description": "Starting point for each interaction",
      "steps": [
        "ALWAYS read .notes/project_overview.md and .notes/task_list.md"
      ]
    },
    "operational_protocol": {
      "description": "How to approach tasks",
      "before_action": [
        "Create a MECE task breakdown"
      ],
      "code_changes": [
        "Read relevant code sections before editing",
        "Preserve existing functionality",
        "Maintain type safety"
      ]
    },
    "safety_requirements": [
      "NEVER break type safety",
      "ALWAYS maintain proper error handling",
      "ALWAYS document new code"
    ],
    "priorities": [
      {
        "source": ".notes/",
        "weight": 1.0
      }
    ],
    "modes": {
      "base": {
        "description": "For routine tasks"
      },
      "enhanced": {
        "description": "For complex problems"
      }
    },
    "project_directives": {
      "name": "Armada",
      "ai_first": true
    },
    "development_principles": {
      "description": "Technical guidelines for code style & performance in the Armada project",
      "details": [
        "You are an expert in React, deck.gl, Python, and full-stack development",
        "Emphasize functional programming patterns (prefer function components and React Hooks; minimize classes in Python)",
        "Use proper naming conventions (Python: snake_case; React: camelCase, PascalCase for components)",
        "Stack: React + TypeScript + deck.gl for the frontend; Python + FastAPI or Flask for the backend",
        "Favor typed code throughout (TypeScript on the frontend; type hints in Python)",
        "Data formats: GeoJSON for geospatial data, or chunked/binary if data sets are large",
        "In Python, maintain minimal global state; pass state explicitly or use event-driven patterns"
      ]
    },
    "performance_guidelines": {
      "description": "Best practices for performance and data handling",
      "details": [
        "Use deck.gl with WebGL optimizations for real-time geospatial rendering",
        "Implement streaming or chunking for large data sets to avoid performance bottlenecks",
        "Minimize re-renders on the React side (use memoization, stable references for props)",
        "Handle error boundaries and loading states gracefully for a responsive UI",
        "For real-time simulations, prefer asynchronous or event-driven updates (e.g., websockets) to push changes to the frontend"
      ]
    }
  }
}
